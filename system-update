#!/bin/bash

################################################################################
#                                                                              #
#     system-update - Keep a gentoo up to date with a single command           #
#     Copyright (C) 2016-2018  Manuel Mommertz <manuel.mommertz@desy.de>       #
#                                                                              #
#     This program is free software: you can redistribute it and/or modify     #
#     it under the terms of the GNU General Public License as published by     #
#     the Free Software Foundation, either version 3 of the License, or        #
#     (at your option) any later version.                                      #
#                                                                              #
#     This program is distributed in the hope that it will be useful,          #
#     but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#     GNU General Public License for more details.                             #
#                                                                              #
#     You should have received a copy of the GNU General Public License        #
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
#                                                                              #
################################################################################

CONFIG_FILES=(
    /usr/share/system-update/system-update.conf
    /etc/system-update.conf
)

for config in "${CONFIG_FILES[@]}"
do
    [[ -f "$config" ]] && { source "$config" || exit; }
done

while (($#))
do
    case "$1" in
        --sync) SYNC=true ;;
        --clean) CLEAN=true ;;
	--bootmgr) BOOTMGR=true ;;
        --no-sync) SYNC=false ;;
        --no-clean) CLEAN=false ;;
	--no-bootmgr) BOOTMGR=false ;;
        *) EMERGE_OPTS+=( "$1" ) ;;
    esac
    shift
done

if (( $EUID ))
then
    EMERGE_OPTS+=( --pretend );
    SYNC=false
    CLEAN=false
    BOOTMGR=false
fi

domerge()
{
    local stage stageOpts stageAtoms stagePreCmds stagePostCmds
    for stage in "$@"
    do
        stagePreCmds="PRE_${stage^^}_CMDS[@]"
        for cmd in "${!stagePreCmds}"
        do
            "$cmd" || return
        done
        stageOpts="EMERGE_${stage^^}_OPTS[@]"
        stageAtoms="EMERGE_${stage^^}_ATOMS[@]"
        emerge "${EMERGE_OPTS[@]}" "${!stageOpts}" "${!stageAtoms}" || return
        stagePostCmds="POST_${stage^^}_CMDS[@]"
        for cmd in "${!stagePostCmds}"
        do
            "$cmd" || return
        done
    done
}

if $SYNC
then
    timestamp="$(date +%s)"
    repos=()
    for repo in $(portageq get_repos /)
    do
        repopath="$(portageq get_repo_path / "$repo")"
        repotime="$timestamp"
        if [[ -d "$repopath/.git" ]]
        then
            if [[ -r "$repopath/.git/FETCH_HEAD" ]]
            then
                repotime="$(date -r "$repopath/.git/FETCH_HEAD" +%s)"
            else
                repotime=0
            fi
        elif [[ -r "$repopath/metadata/timestamp.chk" ]]
        then
            repotime="$(date -f "$repopath/metadata/timestamp.chk" +%s)"
        fi
        if (( timestamp > repotime + SYNC_SEC ))
        then
            repos+=( "$repo" )
        fi
    done
    if (( ${#repos[*]} ))
    then
        emaint sync -r "${repos[*]}"
    fi
fi &&
domerge update clean rebuild &&
cfg-update -au

RETURN="$?"

if $BOOTMGR
then
    hash grub-mkconfig 2>/dev/null && $pretend grub-mkconfig -o /boot/grub/grub.cfg
    hash grub2-mkconfig 2>/dev/null && $pretend grub2-mkconfig -o /boot/grub/grub.cfg
    hash efiboot-sync 2>/dev/null && $pretend efiboot-sync
fi


echo
if [[ $RETURN -eq 0 ]]
then
    if $CLEAN
    then
        eclean-dist $pretend --deep
        eclean-pkg $pretend --deep
    fi
    echo
    echo "Success"
else
    echo "Failed with code: $RETURN"
fi
exit "$RETURN"
